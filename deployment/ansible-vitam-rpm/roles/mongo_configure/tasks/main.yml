---

# Make sure the service is open (mongos listening on 27017)

- name: Wait for the service port to be open
  wait_for: port={{mongos_port}} timeout=10
  when: inventory_hostname == "{{ groups['mongos']|last }}"

# Detect is authentication is enabled
- name: Initiate the admin database
  command: "mongo localhost:{{mongos_port}}/admin -u {{mongoAdminUser}} -p {{mongoAdminPassword}} --quiet --eval 'rs.Status()'"
  when: inventory_hostname == "{{ groups['mongos']|last }}"
  register: authent_enabled
  failed_when: false
  no_log: true

# Copy the mongodb scripts

- name: Copy the init-database.js file
  template: src={{item}}.j2 dest=/tmp/{{item}}
  when:
    - inventory_hostname == "{{ groups['mongos']|last }}"
    - "authent_enabled.stderr == 'exception: login failed'"
  with_items:
    - init-admin-database.js
    - init-metadata-database.js
    - init-logbook-database.js
    - init-masterdata-database.js
    - init-Vitam-database.js
    - enable-sharding.js

# Initiate the databases and the related users

- name: Initiate the admin database
  command: mongo localhost:{{mongos_port}}/{{item}} /tmp/init-{{item}}-database.js
  when:
    - inventory_hostname == "{{ groups['mongos']|last }}"
    - "authent_enabled.stderr == 'exception: login failed'"
  with_items:
    - admin
    - Vitam
    - logbook
    - masterdata
    - metadata

# Enable sharding for specific databases and collections

- name: Enable the sharding
  command: mongo localhost:{{mongos_port}} /tmp/enable-sharding.js
  when:
    - inventory_hostname == "{{ groups['mongos']|last }}"
    - "authent_enabled.stderr == 'exception: login failed'"
# Delete the mongodb scripts

- name: Delete the init-database.js file
  file:
    dest: "/tmp/init-database.js"
    state: "absent"
  when:
    - inventory_hostname == "{{ groups['mongos']|last }}"
    - "authent_enabled.stderr == 'exception: login failed'"
  with_items:
    - init-admin-database.js
    - init-metadata-database.js
    - init-logbook-database.js
    - init-masterdata-database.js
    - init-Vitam-database.js
    - enable-sharding.js

# Activate securite on mongo instances

- name: Activate security on mongos instances
  blockinfile:
    dest: "{{mongos_config_path}}/mongos.conf"
    insertafter: "# ansible managed security conf"
    block: |
      security:
        clusterAuthMode: keyFile
        keyFile: "{{mongos_config_path}}/keyfile"
  delegate_to: "{{item}}"
  with_items: "{{groups['mongos']}}"
  when: inventory_hostname == "{{ groups['mongos']|last }}"

- name: Activate security on mongod instances
  blockinfile:
    dest: "{{mongod_config_path}}/mongod.conf"
    insertafter: "# ansible managed security conf"
    block: |
      security:
        authorization: enabled
        clusterAuthMode: keyFile
        keyFile: "{{mongod_config_path}}/keyfile"
  delegate_to: "{{item}}"
  with_items: "{{groups['mongod']}}"
  when: inventory_hostname == "{{ groups['mongos']|last }}"

- name: Activate security on mongoc instances
  blockinfile:
    dest: "{{mongoc_config_path}}/mongoc.conf"
    insertafter: "# ansible managed security conf"
    block: |
      security:
        authorization: enabled
        clusterAuthMode: keyFile
        keyFile: "{{mongoc_config_path}}/keyfile"
  delegate_to: "{{item}}"
  with_items: "{{groups['mongoc']}}"
  when: inventory_hostname == "{{ groups['mongos']|last }}"

# Restart the mongo instances (to enable auth)

- name: restart mongod
  service:
     name: vitam-mongod
     enabled: true
     state: restarted
  delegate_to: "{{item}}"
  with_items: "{{groups['mongod']}}"
  when: inventory_hostname == "{{ groups['mongos']|last }}"

- name: restart mongoc
  service:
     name: vitam-mongoc
     enabled: true
     state: restarted
  delegate_to: "{{item}}"
  with_items: "{{groups['mongoc']}}"
  when: inventory_hostname == "{{ groups['mongos']|last }}"

- name: restart mongos
  service:
     name: vitam-mongos
     enabled: true
     state: restarted
  delegate_to: "{{item}}"
  with_items: "{{groups['mongos']}}"
  when: inventory_hostname == "{{ groups['mongos']|last }}"
