---

- name: Install curl...
  package:
    name: curl
    state: present
  register: result
  retries: "{{ packages_install_retries_number }}"
  until: result is succeeded
  delay: "{{ packages_install_retries_delay }}"

- name: Copy the functional_administration reconstruction script
  template:
    src: "reconstruction.sh.j2"
    dest: "{{ vitam_defaults.folder.root_path }}/script/functional-administration/reconstruction.sh"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.script_permission }}"

- name: Copy the functional_administration accession register reconstruction script
  template:
    src: "accession_register_reconstruction.sh.j2"
    dest: "{{ vitam_defaults.folder.root_path }}/script/functional-administration/accession_register_reconstruction.sh"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.script_permission }}"

- name: Copy the functional_administration accession register reconstruction input script
  template:
    src: "reconstruction_payload.json.j2"
    dest: "{{ vitam_defaults.folder.root_path }}/script/functional-administration/reconstruction_payload.json"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.script_permission }}"

- name: Copy the functional_administration reconstruction conf
  template:
    src: "reconstruction.conf.j2"
    dest: "{{ vitam_defaults.folder.root_path }}/conf/functional-administration/reconstruction.conf"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  tags:
    - update_vitam_configuration

# Primary site block
- block:

    - name: Ensure vitam-rule-management-audit timer is started
      systemd:
        name: "vitam-rule-management-audit.timer"
        daemon_reload: "yes"
        enabled: "yes"
        state: "started"
      when: inventory_hostname == groups["hosts-functional-administration"] | last

    - name: Ensure vitam-functional-administration-reconstruction timer is stopped
      systemd:
        name: "vitam-functional-administration-reconstruction.timer"
        daemon_reload: "yes"
        enabled: "no"
        state: "stopped"

    - name: Ensure vitam-functional-administration-accession-register-reconstruction timer is stopped
      systemd:
        name: "vitam-functional-administration-accession-register-reconstruction.timer"
        daemon_reload: "yes"
        enabled: "no"
        state: "stopped"

    - name: Ensure vitam-create-accession-register-symbolic timer is started
      systemd:
        name: "vitam-create-accession-register-symbolic.timer"
        daemon_reload: "yes"
        enabled: "yes"
        state: "started"
      when: inventory_hostname == groups["hosts-functional-administration"] | last

  when: primary_site | lower == "true"

# Secondary site block
- block:

    - name: Ensure vitam-rule-management-audit timer is stopped on non-primary site
      systemd:
        name: "vitam-rule-management-audit.timer"
        daemon_reload: "yes"
        enabled: "no"
        state: "stopped"

    - name: Ensure vitam-functional-administration-reconstruction timer is started
      systemd:
        name: "vitam-functional-administration-reconstruction.timer"
        daemon_reload: "yes"
        enabled: "yes"
        state: "started"
      when: inventory_hostname == groups["hosts-functional-administration"] | last

    - name: Ensure vitam-functional-administration-accession-register-reconstruction timer is started
      systemd:
        name: "vitam-functional-administration-accession-register-reconstruction.timer"
        daemon_reload: "yes"
        enabled: "yes"
        state: "started"
      when: inventory_hostname == groups["hosts-functional-administration"] | last

    - name: Ensure vitam-create-accession-register-symbolic timer is stopped
      systemd:
        name: "vitam-create-accession-register-symbolic.timer"
        daemon_reload: "yes"
        enabled: "yes"
        state: "stopped"
      when: inventory_hostname == groups["hosts-functional-administration"] | last

  when: primary_site | lower == "false"
