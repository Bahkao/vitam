---

- block:

    # Make sure the service is open (mongos listening on 27017)
    # TODO: put the timeout in global variable (timeout to wait for mongo to be open)
    - name: Wait for the service port to be open
      wait_for: host={{ ip_service }} port={{ mongodb.mongos_port }} timeout="{{ vitam_defaults.services.start_timeout }}"

    # Detect if authentication is enabled

    - name: Check if authent is enabled
      command: "mongo {{ ip_service }}:{{ mongodb.mongos_port }}/admin -u {{ mongodb.data.admin.user }} -p {{ mongodb.data.admin.password }} --quiet --eval 'db.help()'"
      register: mongo_authent_enabled
      failed_when: false
      no_log: false

    # Set mongo_no_auth facts

    - name: Set default mongo facts
      set_fact:
        mongo_credentials: ""
        mongo_no_auth: false

    - name: Set mongo_no_auth fact to true
      set_fact:
        mongo_no_auth: true
      when: "mongo_authent_enabled.rc != 0"

    # When authentication is required, we set mongodb admin credentials
    - name: Set mongodb authentication credentials
      set_fact:
        mongo_credentials: " -u {{ mongodb.data.admin.user }} -p {{ mongodb.data.admin.password }} --quiet"
      when: "mongo_authent_enabled.rc == 0"
      no_log: false

    # Copy the mongodb scripts

    - name: Copy the database scripts files
      template:
        src: "{{ item }}"
        dest: "{{ vitam_defaults.folder.root_path }}/app/mongos/{{ item | basename | regex_replace('\\.j2$') }}"
        owner: "{{ vitam_defaults.users.vitamdb }}"
        group: "{{ vitam_defaults.users.group }}"
        mode: "{{ vitam_defaults.folder.conf_permission }}"
      with_fileglob:
        - "{{ role_path }}/templates/mongo-data/*"
      when:
        - "mongo_cluster_name == 'mongo-data'"

    - name: Copy the database scripts files
      template:
        src: "{{ item }}"
        dest: "{{ vitam_defaults.folder.root_path }}/app/mongos/{{ item | basename | regex_replace('\\.j2$') }}"
        owner: "{{ vitam_defaults.users.vitamdb }}"
        group: "{{ vitam_defaults.users.group }}"
        mode: "{{ vitam_defaults.folder.conf_permission }}"
      with_fileglob:
        - "{{ role_path }}/templates/mongo-offer/*"
      when:
        - "mongo_cluster_name != 'mongo-data'"

    # Enable sharding for specific databases and collections

    - name: Enable the sharding
      command: mongo {{ ip_service }}:{{ mongodb.mongos_port }}/admin {{ mongo_credentials }} {{ vitam_defaults.folder.root_path }}/app/mongos/enable-sharding.js
      no_log: false

    # Initiate the databases and the related users
    # FIXME: use mongodb_user module which is curently in extras modules -> need to install pymongo on mongodb servers

    - name: Create the users
      command: "mongo {{ ip_service }}:{{ mongodb.mongos_port }}/admin {{ mongo_credentials }} {{ vitam_defaults.folder.root_path }}/app/mongos/users-{{ item }}.js"
      with_items:
        - admin
        - logbook
        - masterdata
        - metadata
        - identity
      no_log: false
      when: "mongo_cluster_name == 'mongo-data'"

    - name: Create the users
      command: "mongo {{ ip_service }}:{{ mongodb.mongos_port }}/admin {{ mongo_credentials }} {{ vitam_defaults.folder.root_path }}/app/mongos/users-{{ item }}.js"
      with_items:
        - admin
        - offer
      no_log: false
      when: "mongo_cluster_name != 'mongo-data'"

    # Activate security on mongo instances

    # TODO: check if we can activate security by default and then create the users
    #  (caution : it seems that we can only create one user while being anonymous after security enabling)
    - name: Activate security on mongos instances
      blockinfile:
        dest: "{{ mongos_config_path }}/mongos.conf"
        insertafter: "# ansible managed security conf"
        block: |
          security:
            clusterAuthMode: keyFile
            keyFile: "{{ mongos_config_path }}/keyfile"
      delegate_to: "{{ item }}"
      when:
        - "mongo_cluster_name == hostvars[item]['mongo_cluster_name']"
      with_items: "{{ groups[mongos] }}"

    - name: Activate security on mongod instances
      blockinfile:
        dest: "{{ mongod_config_path }}/mongod.conf"
        insertafter: "# ansible managed security conf"
        block: |
          security:
            authorization: enabled
            clusterAuthMode: keyFile
            keyFile: "{{ mongod_config_path }}/keyfile"
      delegate_to: "{{ item }}"
      when:
        - "mongo_cluster_name == hostvars[item]['mongo_cluster_name']"
      with_items: "{{ groups[mongod] }}"

    - name: Activate security on mongoc instances
      blockinfile:
        dest: "{{ mongoc_config_path }}/mongoc.conf"
        insertafter: "# ansible managed security conf"
        block: |
          security:
            authorization: enabled
            clusterAuthMode: keyFile
            keyFile: "{{ mongoc_config_path }}/keyfile"
      delegate_to: "{{ item }}"
      when:
        - "mongo_cluster_name == hostvars[item]['mongo_cluster_name']"
      with_items: "{{ groups[mongoc] }}"

    # Restart the mongo instances (to enable auth)

    - name: restart mongod
      service:
         name: vitam-mongod
         enabled: true
         state: restarted
      delegate_to: "{{ item }}"
      when:
        - "mongo_cluster_name == hostvars[item]['mongo_cluster_name']"
      with_items: "{{ groups[mongod] }}"

    - name: restart mongoc
      service:
         name: vitam-mongoc
         enabled: true
         state: restarted
      delegate_to: "{{ item }}"
      when:
        - "mongo_cluster_name == hostvars[item]['mongo_cluster_name']"
      with_items: "{{ groups[mongoc] }}"

    - name: restart mongos
      service:
         name: vitam-mongos
         enabled: true
         state: restarted
      delegate_to: "{{ item }}"
      when:
        - "mongo_cluster_name == hostvars[item]['mongo_cluster_name']"
      with_items: "{{ groups[mongos] }}"

    # Make sure the service is open (mongos listening on 27017)

    - name: Wait for the service port to be open
      wait_for: host={{ ip_service }} port={{ mongodb.mongos_port }} timeout="{{ vitam_defaults.services.start_timeout }}"

    # Initiate the databases (now we know that authentication is enabled)

    - name: Initiate the databases
      command: "mongo {{ ip_service }}:{{ mongodb.mongos_port }}/admin -u {{ mongodb.data.admin.user }} -p {{ mongodb.data.admin.password }} --quiet {{ vitam_defaults.folder.root_path }}/app/mongos/init-{{ item }}-database.js"
      with_items:
        - admin
        - logbook
        - masterdata
        - metadata
        - identity
      no_log: false
      when: "mongo_cluster_name == 'mongo-data'"

    - name: Initiate the databases
      command: "mongo {{ ip_service }}:{{ mongodb.mongos_port }}/admin -u {{ mongodb.data.admin.user }} -p {{ mongodb.data.admin.password }} --quiet {{ vitam_defaults.folder.root_path }}/app/mongos/init-{{ item }}-database.js"
      with_items:
        - admin
        - offer
      no_log: false
      when: "mongo_cluster_name != 'mongo-data'"

  when: mongo_rs_bootstrap is defined and mongo_rs_bootstrap|lower == "true"
