---

# FIXME : will need more testing to be sure it is mandatory here
- name: "install openjdk from {{ ansible_distribution_release }}-backports only when Debian"
  apt:
    name: "{{ item }}"
    state: latest
    default_release: "{{ ansible_distribution_release }}-backports"
  with_items:
    - ca-certificates-java
    - openjdk-8-jre-headless
  when:
    - ansible_os_family == "Debian"
    - disable_internet_repositories_install == false

- name: "install openjdk only when Debian"
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - ca-certificates-java
    - openjdk-8-jre-headless
  when:
    - ansible_os_family == "Debian"
    - disable_internet_repositories_install == true

- import_tasks: tape_offer.yml


# state: latest to handle snapshot versions
- name: Install {{ package_name }} package
  package:
    name: "{{ package_name }}"
    state: latest
  tags:
    - update_package_vitam
  notify:
    - restart service
  when: force_vitam_version is not defined

# Force a specific version to install (even downgrade)
- block:

    - name: Install {{ package_name }} package
      apt:
        name: "{{ package_name }}={{ force_vitam_version }}"
        force: yes
        state: present
      tags:
        - update_package_vitam
      notify:
        - restart service
      when: ansible_os_family == "Debian"

    - name: Install {{ package_name }} package
      yum:
        allow_downgrade : yes
        name: "{{ package_name }}-{{ force_vitam_version }}"
        state: present
      tags:
        - update_package_vitam
      notify:
        - restart service
      when: ansible_os_family == "RedHat"

  when: force_vitam_version is defined

- name: ensure {{ package_name }} service is enabled
  service:
    name: "{{ package_name }}"
    enabled: true
  notify:
    - restart service
  when: ( primary_site | lower == "true" ) or
        ( vitam_struct.vitam_component in vitam_secondary_site_components )

- name: ensure {{ package_name }} service is disabled and stopped
  service:
    name: "{{ package_name }}"
    enabled: false
    state: stopped
  when: ( primary_site | lower == "false" ) and
        ( vitam_struct.vitam_component not in vitam_secondary_site_components )


#### Configuration ####

- name: Check that the directories exist (must be removed when the RPM plugin will be patched)
  file:
    path: "{{ vitam_defaults.folder.root_path }}/{{ item }}/{{ vitam_struct.vitam_component }}"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  with_items:
    - app
    - bin
    - conf
    - data
    - lib
    - log
    - script
    - tmp
  notify:
    - restart service

- name: Ensure that the sysconfig sub-directory exists
  file:
    path: "{{ vitam_folder_conf }}/sysconfig"
    state: directory
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.folder_permission }}"
  notify:
    - restart service

- name: Deploy common configuration files in sysconfig subdir
  template:
    src: "{{ item }}.j2"
    dest: "{{vitam_folder_conf}}/sysconfig/{{ item }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "java_opts"
  tags:
    - update_jvmoptions_vitam
  notify:
    - restart service

- name: Deploy common configuration files
  template:
    src: "{{ item }}.j2"
    dest: "{{vitam_folder_conf}}/{{ item }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_items:
    - "java.security"
    - "logbook-client.conf"
    - "server-identity.conf"
    - "logback.xml"
    - "logback-access.xml"
    - "antisamy-esapi.xml"
    - "jetty-config.xml"
    - "vitam.conf"
    - "vitam.metrics.conf"
  tags:
    - update_vitam_configuration
  notify:
    - restart service

# TODO: Explain the with_items and when line, or better find a cleaner way (split with separate command ?).
# Caution : commands in both lines (with_items and when) should always both return a success code (even if folder doesn't exist)
- name: Deploy specific configuration files (can override the common configuration files)
  template:
    src: "{{ item }}"
    dest: "{{vitam_folder_conf}}/{{ item | basename | regex_replace('\\.j2$') }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_fileglob:
    - "{{ role_path }}/templates/{{ vitam_struct.vitam_component }}/*"
  no_log: "{{ hide_passwords_during_deploy }}"
  tags:
    - update_vitam_configuration
  notify:
    - restart service

- name: copy files section for {{ package_name }} when applicable
  copy:
    src: "{{ item }}"
    dest: "{{vitam_folder_conf}}/{{ item | basename | regex_replace('\\.j2$') }}"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  with_fileglob:
    - "{{ role_path }}/files/{{ vitam_struct.vitam_component }}/*"
  notify:
    - restart service

- name: ensure external messages file is absent
  file:
    path: "{{ vitam_folder_conf }}/vitam-logbook-messages_fr.properties"
    state: absent
  notify:
    - restart service

#### Certificates stores deployment ####

- name: "Copy {{ vitam_struct.vitam_component }} jks keystore (server)"
  copy:
    src: "{{inventory_dir}}/keystores/server/{{inventory_hostname}}/keystore_{{vitam_struct.vitam_component}}.jks"
    dest: "{{vitam_folder_conf}}/keystore_{{vitam_struct.vitam_component}}.jks"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: "{{ lookup('pipe', 'test -f {{inventory_dir}}/keystores/server/{{inventory_hostname}}/keystore_{{vitam_struct.vitam_component}}.jks || echo nofile') == \"\" }}"
  tags:
    - update_vitam_certificates
  notify:
    - restart service

- name: "Copy truststore"
  copy:
    src: "{{inventory_dir}}/keystores/client-{{vitam_certificate_client_type}}/truststore_{{vitam_certificate_client_type}}.jks"
    dest: "{{vitam_folder_conf}}/truststore_{{vitam_struct.vitam_component}}.jks"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: "( vitam_certificate_client_type is defined ) and ( {{ lookup('pipe', 'test -f {{inventory_dir}}/keystores/client-{{vitam_certificate_client_type}}/truststore_{{vitam_certificate_client_type}}.jks || echo nofile') == \"\"}} )"
  tags:
    - update_vitam_certificates
  notify:
    - restart service

- name: "Copy server grantedstore"
  copy:
    src: "{{inventory_dir}}/keystores/client-{{vitam_certificate_client_type}}/grantedstore_{{vitam_certificate_client_type}}.jks"
    dest: "{{vitam_folder_conf}}/grantedstore_{{vitam_struct.vitam_component}}.jks"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: "( vitam_certificate_client_type is defined ) and ( {{ lookup('pipe', 'test -f {{inventory_dir}}/keystores/server/{{inventory_hostname}}/keystore_{{vitam_struct.vitam_component}}.jks || echo nofile') == \"\"}} ) and ( {{ lookup('pipe', 'test -f {{inventory_dir}}/keystores/client-{{vitam_certificate_client_type}}/grantedstore_{{vitam_certificate_client_type}}.jks || echo nofile') == \"\"}} )"
  tags:
    - update_vitam_certificates
  notify:
    - restart service

- name: "Copy {{ vitam_struct.vitam_component }} p12 keystore (clients)"
  copy:
    src: "{{inventory_dir}}/keystores/client-{{vitam_certificate_client_type}}/keystore_{{vitam_struct.vitam_component}}.p12"
    dest: "{{vitam_folder_conf}}/keystore_{{vitam_struct.vitam_component}}.p12"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: "( vitam_certificate_client_type is defined ) and ( {{ lookup('pipe', 'test -f {{inventory_dir}}/keystores/client-{{vitam_certificate_client_type}}/keystore_{{vitam_struct.vitam_component}}.p12 || echo nofile') == \"\" }} )"
  tags:
    - update_vitam_certificates
  notify:
    - restart service

- name: "Copy timestamp keystore"
  copy:
    src: "{{inventory_dir}}/keystores/timestamping/keystore_{{vitam_timestamp_usage}}.p12"
    dest: "{{ vitam_folder_conf }}/keystore_{{vitam_timestamp_usage}}.p12"
    owner: "{{ vitam_defaults.users.vitam }}"
    group: "{{ vitam_defaults.users.group }}"
    mode: "{{ vitam_defaults.folder.conf_permission }}"
  when: "( vitam_timestamp_usage is defined ) and ( {{ lookup('pipe', 'test -f {{inventory_dir}}/keystores/timestamping/keystore_{{vitam_timestamp_usage}}.p12 || echo nofile') == \"\" }} )"
  tags:
    - update_vitam_certificates
  notify:
    - restart service

- include_tasks: remove_metrics.yml
  when: vitam_struct.metrics_enabled |lower != "true"

- import_tasks: consul.yml

- import_tasks: ihm_demo.yml

- name: flush_handlers
  meta: flush_handlers

- name: Ensure {{ package_name }} service is started
  service:
    name: "vitam-{{ vitam_struct.vitam_component }}"
    state: started
  when: ( primary_site | lower == "true" ) or
        ( vitam_struct.vitam_component in vitam_secondary_site_components )

- name: Check if {{ package_name }} is listening on service port {{ vitam_struct.port_service }}
  wait_for:
    host: "{{ ip_service }}"
    port: "{{ vitam_struct.port_service }}"
    state: started
  when: ( primary_site | lower == "true" ) or
        ( vitam_struct.vitam_component in vitam_secondary_site_components )
