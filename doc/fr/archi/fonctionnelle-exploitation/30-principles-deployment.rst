Déploiement de la solution
##########################

Principes de déploiement
========================

Les principes généraux de déploiement sont les suivants :

* Les packages d'installation (ex: RPM) sont identiques pour tous les environnements ; seule leur configuration change.
* La configuration des services est externalisée et gérée par l'outillage de déploiement.
* Le déploiement est décrit intégralement dans un fichier de définition du déploiement. En-dehors des pré-requis, le déploiement initial est automatisé en totalité (sauf exception).
* Les services sont configurés par défaut pour permettre leur colocalisation (dans le sens de la colocalisation de deux instances de deux moteurs différents) (ex: dossiers d'installation / de fonctionnement différents, ports d'écoute différents, ...).


Contraintes et vue d'ensemble
=============================

Les zones logiques présentées dans :doc:`la section sur l'architecture applicative VITAM </fonctionnelle-archivistes/white-box/10-services>` correspondent également aux zones de sécurité préconisées pour le déploiement de VITAM :

.. figure:: /technique/images/technical-architecture-deployment.*
	:align: center

	Déploiement VITAM : zones, composants

.. figure:: /technique/images/technical-architecture-legend.*
	:align: center

	Légende

.. seealso:: Ce découpage est repris dans :doc:`la présentation de l'architecture technique détaillée </technique/01-technical-architecture>`. 

Chaque zone héberge des clusters de services ; un cluster doit être présent en entier dans une zone, et ne peut par conséquent pas être réparti dans deux zones différentes. Chaque noeud d'un cluster applicatif doit être installé sur un hôte (OS) distinct (la colocalisation de deux instances d'un même service n'étant pas supporté) ; dans le cas de l'utilisation d'un système de virtualisation d'OS (type hyperviseur), il est **recommandé** de placer deux noeuds d'un même cluster applicatif sur deux serveurs physiques différents.

Il est **interdit** de colocaliser des composants appartenant à la zone accès avec des composants appartenant à d'autres zones. Il est également **interdit** de colocaliser des composants appartenant à la zone d'administration avec des composants appartenant à d'autres zones. De manière plus générale, il est **fortement déconseillé** de colocaliser des composants appartenant à des zones différentes. Il est par contre **possible** de colocaliser des composants appartenant à des sous-zones différentes dans la zone des services internes.

Il est **possible** de colocaliser les clusters suivant :

* ingest-internal.vitam et processing.vitam ;
* workspace.vitam et storage-engine.vitam ;
* logbook.vitam et functional-administration.vitam ;
* access-internal.vitam et metadata.vitam ;
* ingest-external.vitam, access-external.vitam et administration-external.vitam ;
* logstash.log.vitam, elasticsearch.log.vitam, kibana.log.vitam (pour les déploiements de taille limité).

Il est **recommandé** de ne pas colocaliser les composants de type worker, ceux-ci ayant une consommation de resources système potentiellement importante.


Outillage de déploiement
========================

Outil
-----

L'outil de déploiement utilisé sur Vitam est ansible. Cette solution de déploiement a les caractéristiques suivantes : 

* Agent-less : la propagation des ordres de déploiement utilise SSH et nécessite sur les serveur un interpréteur Python 2.6+. (Cf. `la documentation officielle <https://docs.ansible.com/ansible/intro_installation.html>`_ pour la liste exhaustive des dépendances requises). 

* Méthode d'authentification : l'authentification est faite par un utilisateur habilité à se connecter à SSH et devant pouvoir avoir les élévations de privilèges nécessaires pour faire les actions (via su ou sudo) :

  + Le choix de la méthode d'authentification (mot de passe, clé publique sans passphrase ou clé publique avec passphrase) peut être choisi en fonction des contraintes d'hébergement. Cependant, certaines méthodes limiteront l'automatisation du déploiement
  + La mise en place de cet utilisateur est un pré-requis à la mise en oeuvre de Vitam

.. hint:: Sur Centos, l'interpréteur Python et les packages python requis pour l'exécution d'ansible sur les noeuds gérés sont inclus dans ceux de yum et sont donc généralement présents sur les Centos 7. 

L'outil de déploiement prend en entrée : 

* La topologie de l'environnement (quel composant est installé sur quel serveur) 
* L'ensemble des paramètres de l'environnement

Ces 2 entrées sont définies par l'utilisateur sous la forme de fichiers ansible (fichier d'inventaire et de variables).

.. caution:: L'utilisation d'ansible nécessite les droits root sur l'environnement cible (soit en tant qu'utilisateur root, soit en sudoer sans mot de passe) par l'utilisateur linux faisant le déploiement. Le :term:`DIN` contiendra les informations requises pour prendre en compte cet utilisateur.

.. Question : root OK pour déploiement et configuration initiale de l'OS ; par contre, quid de la configuration applicative, qui pourrait être réglée par un utilisateur appartenant au group vitam-admin ? A résoudre dans une version ultérieure

.. warning:: L'utilisation d'une méthode de déploiement autre n'est pas supportée par le projet VITAM.


Architecture de l'outil
-----------------------

On dispose de 2 types de playbooks : 

* 1 playbook de bootstrap qui est joué au plus une fois lors de l'initialisation de nouveaux services (ex : création des utilisateurs vitam (Cf. :doc:`la section dédiée <01-principles-users-rights>`)
* 1 playbook de déploiement qui est le coeur du déploiement

On dispose de 2 types de rôles : 

* rôle "helper" qui est appelé par les autres rôles et qui n'est pas contenu dans les playbook 
* rôle "service" : 1 rôle par service déployé. 

L'ensemble des fichiers de configuration (devant être instancié) seront géré par l'outil de déploiement (via le language de templating Jinja 2)


Gestion des secrets
-------------------

Pour les variables ayant un criticité (au sens de la sécurité - par exemple : les mots de passe de connexion aux bases de données), le déploiement VITAM est compatible avec l'utilisation du module Ansible Vault : celui-ci permet de chiffrer de manière symétrique les variables sensibles. 

.. warning:: Cette fonctionnalité nécessite d'entrer la passphrase du fichier chiffré et donc est difficilement compatible avec une automatisation forte. 

Les certificats (notamment CA et certificats serveur) devront être fournis au préalable et être placés dans les répertoires d'installation mentionnés dans le :term:`DIN`.

A ce jour, seuls les composants frontaux (i.e. faisant partie de la zone Accès) nécessitent un certificat. Pour tout certificat, l'intégralités des certificats des CA de la chaîne de certification devra également être fournie, ainsi que l'URL des CRL associées.

.. seealso:: La liste des secrets nécessaires au bon fonctionnement de VITAM est décrit dans la :doc:`section dédiée </securite/_toc>`.


Installation initiale
=====================

Le processus de déploiement a les responsabilités suivantes :

* Effectuer une mise en conformité des OS des serveurs cible pour certains pré-requis à l'installation de VITAM, notamment :

  - les utilisateurs, groupes et dossiers propres à VITAM ;
  - certains services système utilisés par VITAM (ex: rsyslog).

* Déployer, installer et configurer les composants logiciels VITAM ;
* Déployer certaines configurations de tuning système (ex: ``sysctl.conf``, ``limits.conf``).
  
.. note:: La portée des modifications appliquées au système sera décrite de manière plus précise dans la documentation d'installation livrée avec chaque version.

La portée de la configuration applicative est décrite dans le schéma présenté au paragraphe `Contraintes et vue d'ensemble`_. 

.. seealso:: Plus de détails sur l'installation sont disponibles dans le :term:`DIN`.


Principes de maj à chaud
========================

La mise à jour à chaud n'est pas supportée dans la première version du système VITAM.


Validation du déploiement
=========================

.. todo:: Les principes et techniques de validation d'un bon déploiement sont en cours de définition ; ils dépendent en partie des API de monitoring exposées, et seront donc finalisés une fois ces API complètement spécifiées. 

.. 
   La validation du déploiment peut être réalisée à partir d'un ensemble de tests métier fournis par VITAM et permettant de valider le bon fonctionnement du système. 

   Les tests seront fournis au format SoapUI, et permettront de tester le bon fonctionnement des interfaces.

   A définir : ces tests peuvent-ils changer l'état de certaines données (ex: ajout / modification / suppression) ? Si oui, comment les reconnaît-on dans le système ? Parle-t-on ici des tests de charge ? En parle-t-on ailleurs ?

