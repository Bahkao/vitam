Processus de déploiement
########################

Principes de déploiement
========================

Les principes de déploiement sont les suivants :

* Les packages d'installation (ex: RPM) sont identiques pour tous les environnements ; seule leur configuration change.
* La configuration des services est externalisée et gérée par l'outillage de déploiement.
* Les services sont configurés par défaut pour permettre leur colocalisation (dans le sens de la colocalisation de deux instances de deux moteurs différents) (ex: dossiers d'installation / de fonctionnement différents, ports d'écoute différents, ...)


Contraintes sur le déploiement
==============================

.. todo:: Sujet à compléter

Une vision du déploiement des services VITAM a été présentée dans :doc:`la section sur l'architecture applicative VITAM </fonctionnelle/fonctionnelle-archivistes/white-box/services>` ; elle propose une séparation minimale recommandée de VITAM en zones de sécurité différentes.

.. A faire : Séparer le schéma d'architecture applicative (avec les flux entre composants) et les contraintes de zoning, à décrire ici ; intégrer à ce schéma d'architecture les briques techniques

Ces zone de sécurité sont les suivantes :

* La zone des services externes : elle contient les API exposées aux systèmes utilisant VITAM ;
* La zone des services internes
* La zone d'accès aux données : elle contient les moteurs de base de données
* La zone d'administration technique : elle contient tous les éléments permettant de superviser et maintenir VITAM

..
   Aborder notamment :

    * Affinités / anti-affinités suggérées
    * Contraintes de zoning proposées


Outillage de déploiement
========================


Outil
-----

L'outil de déploiement utilisé sur Vitam est ansible. Cette solution de déploiement a les caractéristiques suivantes : 

* Agent-less : la propagation des ordres de déploiement utilise SSH et nécessite sur les serveur un interpréteur Python 2.6+ . 

  + Centos : L'interpréteur Python et les packages pour ansible sont inclus dans ceux de yum et sont donc généralement présents sur les Centos 7. 
  + Debian : L'installation de l'interpréteur python fera partie de l'initialisation du processus 

* Méthode d'authentification : l'authentification est faite par un utilisateur habilité à se connecter à SSH et devant pouvoir avoir les élévations de privilèges nécessaires pour faire les actions (via su ou sudo) :

  + Le choix de la méthode d'authentification (mot de passe, clé publique sans passphrase ou clé publique avec passphrase) peut être choisi en fonction des contraintes d'hébergement. Cependant, certaines méthodes limiteront l'automatisation du déploiement
  + La mise en place de cet utilisateur est un pré-requis à la mise en oeuvre de Vitam (un playbook ansible sera fournit comme aide à cette mise en oeuvre)

L'outil de déploiement prend en entrée : 

* La topologie de l'environnement (quel composant est installé sur quel serveur)
* L'ensemble des paramètres de l'environnement 

En bêta, ces 2 entrées sont définies par l'utilisateur sous la forme de fichiers ansible (fichier d'inventaire et de variables)

.. caution:: L'utilisation d'ansible nécessite les droits root sur l'environnement cible (soit en tant qu'utilisateur root, soit en sudoer sans mot de passe) par l'utilisateur linux faisant le déploiement (pratique proposée: fournir un utilisateur vitam-deploy qui est sudoer sans mot de passe).

.. Question : root OK pour déploiement et configuration initiale de l'OS ; par contre, quid de la configuration applicative, qui pourrait être réglée par un utilisateur appartenant au group ??? ?

.. caution:: L'utilisation d'une méthode de déploiement autre n'est pas supportée par le projet VITAM.


Architecture de l'outil
-----------------------

On dispose de 2 types de playbooks : 

* 1 playbook de bootstrap qui est joué au plus une fois lors de l'initialisation de nouveaux services (ex : création des utilisateurs, gestion initiale des dépôts)
* 1 playbook de déploiement qui est le coeur du déploiement

On dispose de 2 types de rôles : 

* rôle "helper" qui est appelé par les autres rôles et qui n'est pas contenu dans les playbook 
* rôle "service" : 1 rôle par service déployé. 

L'ensemble des fichiers de configuration (devant être instancié) seront géré par l'outil de déploiement (via le language de templating Jinja 2)


Gestion des variables
~~~~~~~~~~~~~~~~~~~~~

Concernant les variables, pour les variables ayant un criticité (au sens de la sécurité), il existe Ansible Vault : celui-ci permet de chiffrer de manière symétrique les variables sensibles. 

A noter que cette fonctionnalité nécessite d'entrer la passphrase du fichier chiffré et donc est difficilement compatible avec une automatisation forte. 

Dans la Bêta, l'usage d'Ansible Vault est possible mais ne bénéficiera pas d'éléments facilitant son utilisation. 


Installation initiale
=====================

.. todo:: Sujet à adresser.

.. Quel est le scope de l'installation initiale ? Jusqu'où va-t-on dans la configuration / installation / paramétrage ? Quelle est la limite avec les équipes système ?


Principes de maj à chaud
========================

.. todo:: Sujet à adresser

.. A détailler : rolling update ? Comment leur propose-t-on de faire ?


Validation du déploiement
=========================

.. todo:: Sujet à valider et compléter

..
   La validation du déploiment peut être réalisée à partir d'un ensemble de tests métier fournis par VITAM et permettant de valider le bon fonctionnement du système. 

   Les tests seront fournis au format SoapUI, et permettront de tester le bon fonctionnement des interfaces.

   A définir : ces tests peuvent-ils changer l'état de certaines données (ex: ajout / modification / suppression) ? Si oui, comment les reconnaît-on dans le système ? Parle-t-on ici des tests de charge ? En parle-t-on ailleurs ?

