Suivi de l'état du système
##########################


Suivi de l'état des composants
==============================


API de supervision
------------------

Chaque composant logiciel développé au sein de la solution VITAM doit exposer sur la même interface réseau que le réseau de fonctionnement les API REST suivantes :

* ``/status`` : statut simple, renvoyant uniquement une réponse HTTP 204 (le composant peut répondre à des requêtes) ou 500 (le composant n'est pas en mesure de servir un client). Ce status a pour but d'être exploitable par un élément tiers (ex: load-balancer, système amont, ...) sans pour autant exposer des informations internes à l'application. L'appel doit être peu coûteux, ouvert à tous.
  
Il doit exposer en interne de la plate-forme les API REST suivantes :

* ``/status/status`` : statut simple, renvoyant un statut de fonctionnement plus complet, incluant potentiellement des informations métier. Un exemple d'utilisation typique est l'intégration à un outil de supervision. L'appel doit être peu coûteux.
* ``/status/autotest`` : autotest plus complexe et complet ; il doit tester l'état du composant et de ses dépendances (ex: connexion OK à la base de données, présence du schéma requis, ...)). Un exemple d'utilisation typique est la validation d'un déploiement applicatif ; cette API peut également servir en première étape d'analyse d'un problème. L'appel à l'autotest est potentiellement coûteux.
* ``/status/version`` : version du composant déployé. Un exemple d'utilisation typique est la validation d'un déploiement applicatif, ou la validation d'un état de configuration d'un environnement.
* ``/status/stats`` : statistiques d'utilisation du composant ; pour chaque endpoint REST, il doit renvoyer les informations suivantes :

    - Fréquence d'appel sur les dernière 1, 5 et 15 minutes ;
    - Nombre de résultats selon le code HTTP renvoyé ;
    - Avec un sampling des temps de réponses biaisé sur les 5 dernières minutes :

        + Le minimum
        + Le maximum
        + La moyenne
        + L'écart type
        + Le 95ème percentile

.. todo:: Les API REST seront complètement définies une fois la spécification associée réalisée.

.. note:: Les statistiques sont calculées en utilisant la bibliothèque Java `metrics <http://metrics.dropwizard.io/>`_, et notamment le plugin jersey2-metrics.


Métriques
---------

.. todo::

    Les éléments suivants sont en cours d'étude :

    * Identification des métriques
   
        - Métier
        - Techniques
        - Indicateurs de SLO & performance
        
    * Centralisation et exploitation des métriques : API, COTS

    Ils seront définis une fois la spécification associée réalisée.


Logs
----

Tous les composants VITAM envoient leur logs au sein du service syslog local ; dès lors, le log est pris en charge par le sous-système dédié à la collecte et exploitation des logs, qui est décrit plus en détails dans :doc:`la section dédiée </technique/05-logs-architecture>`.

De plus, ils sont configurées par défaut pour écrire leurs logs dans des fichiers de logs (dans le répertoire dédié pour chaque composant (Cf. la :doc:`section dédiée <01-principles-users-rights>`)), avec le paramétrage suivant :

* Pour les logs applicatifs :

    - Format des logs : identique au format des logs écrits dans syslog ;
    - Filtre : sur la sévérité, ``WARN`` et plus grave ;
    - Roulement : le roulement des fichiers dépend du temps, avec une taille globale maximale ; il est défini par la politique ``TimeBasedRollingPolicy`` de `l'appender RollingFileAppender <http://logback.qos.ch/manual/appenders.html#RollingFileAppender>`_, avec les paramètres suivants :

        + Nombre total de fichiers conservés : 30 (paramètre ``maxHistory``) ;
        + Taille totale des fichiers de logs : 5 Go (paramètre ``totalSizeCap``) ;
        + Pattern des fichiers : dans le répertoire de logs de l'application : ``app/application.%d.log`` (``%d`` étant remplacé par ``yyyy-MM-dd``) (paramètre ``fileNamePattern``).

.. caution:: Les stacktraces sont exclues de l'envoi à la centralisation des logs (paramètre ``throwableExcluded`` placé à ``false``).
    
* Pour les logs du garbage collector :

    - Format des logs : format des logs GC utilisés par l'implémentation de la JVM utilisée ;
    - Roulement : le roulement des fichiers dépend de la taille des fichiers, avec un nombre de fichiers maximal ; il est défini comme suit : 

        + Nombre total de fichiers conservés : 10 ;
        + Taille unitaire maximale d'un' fichiers de logs : 10 Mo ;
        + Pattern des fichiers : dans le répertoire de logs de l'application : ``gc/gc.log`` pour le fichier courant, ``gc/gc.log.<n>`` pour les fichiers roulés (avec ``<n>`` le numéro du fichier, sur base 0).

.. hint::
    Les éléments suivants correspondent aux paramètres de démarrage java suivants::
        
        -Xloggc:$LOG_FOLDER/gc/gc.log
        -XX:+UseGCLogFileRotation
        -XX:NumberOfGCLogFiles=10
        -XX:GCLogFileSize=10M
        -XX:+PrintGCDetails
        -XX:+PrintGCApplicationStoppedTime

Enfin, le format des logs doit être défini dans le fichier logback.xml déposé à la racine du répertoire de configuration de chaque composant ; seul l'id du service doit être un élément de choix.



.. 
    Suivi de l'état de sécurité
    ===========================
.. 
    Sujet à adresser


.. 
    Suivi de l'état de déploiement
    ==============================
.. 
    Sujet à adresser ; à définir en liaison avec la section sur :doc:`le déploiement <30-principles-deployment>`


.. A intégrer à l'ihm d'administration technique ?


Intégration à un système de monitoring tiers
============================================

L'intégration à un système de monitoring tiers est possible via les points d'extension suivants :

* Les API REST de monitoring des composants Java
