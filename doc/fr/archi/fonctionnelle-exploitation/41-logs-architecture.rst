##################################################
Concentration et exploitation des logs applicatifs
##################################################

Besoins
-------

Contrairement aux journaux applicatifs, les logs générés par les applications ne participent pas à la valeur probante et à la preuve systèmique du SAE. Il n'y a donc pas de besoin métier sur la non perte de logs . 
L'infrastructure de traitement des logs générés par les applications doit être compatible avec celle 

Modèle générique
----------------

On peut noter les composants suivants :

* Emetteur du log : il s'agit de l'application qui est à l'origine du log 
* Agent de transport du log : il s'agit d'un composant recevant tous les logs associés à un serveur/VM (mais pas container)
* Concentrateur du log : il s'agit de la cible de réception du log . 
* Stockage des logs : il s'agit du composant stockant les logs (de manière plus ou moins requêtable)
* Visualisation des logs : il s'agit du composant (souvent IHM) qui permet la recherche et la visualisation des logs 

Les échanges doivent se faire selon des protocoles données : 

* Protocole d'emission du log (entre emetteur et agent de transport)
* Protocole de transport du log (entre agent de transport et concentrateur)

L'architecture générique peut être vue de la manière suivante : 

   .. image:: images/gestion_logs.png

Choix des implémentations
-------------------------

Pour chacune des fonctions, les choix suivants d'implémentation ont été faits : 

* Emetteur de logs : Les émetteurs de logs sont les différents programmes devant écrire des logs . 
  + Stack Java : il sera utilisé les appender des bibliothèques de logs écrivant vers syslog
  + Script unix, il sera utilisé la commande logger
* Agent de transport de log: Au moins pour la bêta, le choix sera un agent rsyslog. Il s'agit en effet de l'agent syslog par défaut sur les distributions supportées par Vitam, présente une consommation mémoire limitée (notamment par rapport à d'autres solutions en Java ou Ruby)
* Concentration de logs : Pour la bêta, la réflexion est toujours d'actualité
* Stockage des logs : Pour la bêta, la réflexion est toujours d'actualité 
* Visualisation des logs : Pour la bêta, la réflexion est toujours d'actualité

Les protocoles utilisés sont les suivants : 

* Protocole d'emission de logs (entre l'émetteur et l'agent de transport) : 

  + Le format syslog unix (écriture dans /dev/log) est privilégié pour les messages émis par les scripts shell (protocole par défaut de la commande logger) . 
  + Le format syslog udp  (sans garantie d'acheminement) est privilégié pour les messages émis par les applications Java car c'est le protocole mis en oeuvre dans les appender Java (et plus agnostique de la plateforme qu'un socket unix). A noter que le manque de fiabilité d'udp est contre-balancé par le fait que le socket UDP est en local (écriture vers l'agent de transport qui se trouve sur le même OS)

* Protocole de transport du log (entre agent de transport et concentrateur) : 

  + Le format syslog tcp (RFC 5424) est privilégié car il est un bon compromis entre fiabilité (sécurité d'acheminement de TCP) et exploitabilité . Il n'y a en effet pas de contraintes imposant des protocoles plus 'reliable' comme RLTP ou RELP.   

Formatage des logs
------------------

En se basant sur la RFC 5424, Vitam impose les élements suivants : 

* "Facility" utilisé par VITAM : Vitam n'utilise pas les facilités "système" mais seulement les facilités local0 à local3 . Par défaut,  Vitam logguera sur la facilité local0 .
* "APPNAME" utilisé par VITAM : Toutes les logs Vitam auront le champ APPNAME de la forme : VITAM-<ID Application> . A noter que l'instance de l'application n'est pas mise dans le champ 'APPNAME' car du fait des principes de packaging, il ne peut y avoir qu'une seule instance d'application par OS et le tuple (HOSTNAME, APPNAME) identifie bien l'application
* Pour la structure du champ MSG, se référer à la documentation de l'émetteur du log

Haute disponibilité
-------------------

Il n'est pas prévu de haute disponibilité en bêta.

Limites
-------

On peut noter les limites suivantes : 

* Dans le cadre de l'utilisation d'un protocole d'émission 'syslog', tout personne sur le serveur/VM peut spoofer des logs y compris pour se faire passer pour un autre serveur
* Il n'y a pas de garantie d'acheminement quand l'application emet une trame via le protocole d'émission 

