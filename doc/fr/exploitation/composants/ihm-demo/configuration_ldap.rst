Configuration de apache shiro
******************************

Présentation authentification via LDAP
**********************************************

Afin de pouvoir authentifier des clients via une base de données LDAP il suffit de bien configurer shiro.
Pour ce faire vitam utilise le fichier shiro.ini qui a la forme suivante.

.. code-block:: yaml

    [main]
    contextFactory = org.apache.shiro.realm.ldap.JndiLdapContextFactory
    contextFactory.url = ldap://localhost:389
    contextFactory.systemUsername = cn=admin,dc=example,dc=org
    contextFactory.systemPassword = password

    realm = fr.gouv.vitam.common.security.rest.LdapRealm
    realm.ldapContextFactory = $contextFactory
    realm.searchBase = "dc=example,dc=org"
    realm.groupRequestFilter = (&(objectClass=groupOfNames)(member={0}))
    realm.userDnTemplate = uid={0},dc=example,dc=org
    realm.groupRolesMap = "cn=gadmins,dc=example,dc=org":"admin", "cn=gusers,dc=example,dc=org":"user", "cn=gadmins,dc=example,dc=org":"guest"

    realm.rolePermissionsMap = "admin":"*","user":"messages:*, archivesearch:*, logbook:*, ingest:*, archiveupdate:*, archiveunit:*, ingests:read, admin:formats:read, admin:rules:read, admin:accession-register:read, logbookunitlifecycles:*, logbookobjectslifecycles:*","guest":"archivesearch:*, archiveUnit:*, units:*, unit:*"

    securityManager.realms = $realm


Décryptage de shiro.ini
***********************

[main]
Contient la déclaration des options et mappings dans l'authentication ldap:

- contextFactory.url : url du serveur ldap
- contextFactory.systemUsername : identifiant de l'util
- contextFactory.systemPassword : mot de passe
- realm.searchBase : la domaine de recherche dans LDAP
- realm.groupRequestFilter : chaque utilisateur est déclaré dans un groupe, cette requête sert à chercher les groupes de l'utilisateur,
- realm.userDnTemplate : le modèle pour traduire un identifiant de l'utilisateur en DN (distinguished name) dans ldap
- realm.groupRolesMap : le mapping entre le DN des group de l'utilisateur et les rôles dans ihm
- realm.rolePermissionsMap : le mapping entre le DN les rôles et les permissions d'utilisateur


Note: on peut déclarer plusieurs groups qui ont la même rôle admin avec ce syntaxe :

.. code-block:: yaml

    "groupeA" : "admin", "groupeB" : "admin", "groupeC" : "admin"


même syntaxe pour le mapping rolePermissionsMap.
