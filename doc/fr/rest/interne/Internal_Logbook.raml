#%RAML 0.8
title: Moteur de Journalisation
baseUri: http://server-internal/logbook/{version}
version: v0.0.5
protocols: [ HTTP ]

mediaType: application/json

securitySchemes:
  - x-vitam-platform-key:
      type: x-hedader-key
      description: Vitam Platform Key
      describedBy:
        headers:
          x-vitam-key:
            type: string

securedBy: [ x-vitam-platform-key ]

schemas:
  - error: !include schema/error.json
  - logbook: !include schema/logbook.json
  - logbooks: !include schema/logbooks.json
  - collectionQuery: !include schema/collection_query.json
  - collectionAppend: !include schema/collectionAppend.json
  - status: !include schema/status.json

traits: !include traits/Traits.raml

resourceTypes: !include resourceTypes/InternalResourceTypes.raml

documentation:
  - title: Opérations
    content: |
      Le principe proposé serait le suivant:
        - Lorsqu'une opération commence: POST /operations avec un JSON **multiple** contenant l'ID de l'opération ; il s'agit d'un "bulk create" en provenance d'API externes vers des API internes qui agissent en délégataires ; de manière similaire PUT /operations permet une mise à jour (append) en fin de traitement
        - Si l'événement est nouveau sur un module interne:
          ' POST /operations/id_op
        - Lorsqu'un nouvel événement intervient sur la même opération:
          - PUT /operations/id_op
        - Celui qui créé l'opération la conclue avec le statut final
          - PUT /operations/id_op
        - L'accès à une opération se fait via:
          - GET /operations/id_op qui retourne la liste des événements
        - Le test d'existence d'une opération se fait via:
          - HEAD /operations/id_op qui retourne 200 si il existe
        - La recherche d'opérations se fait via:
          - GET /operations qui retourne une liste d'opérations compatibles

      Questions ou remarques:
        - Le journal est par jour et sécurisé (moteur de stockage) mais aussi en base.
  - title: Cycle de vie
    content: |
      Le principe proposé serait le suivant:
        - Lorsqu'une opération intervient sur un Unit ou ObjectGroup, la création se fait:
          - POST /operations/id_op/xxxxxlifecycles/id_lc
          - où xxxxx est remplacé par unit ou objectgroup
        - Lorsqu'une opération intervient sur un Unit ou ObjectGroup, l'ajout se fait:
          - PUT /operations/id_op/xxxxxlifecycles/id_lc
          - où xxxxx est remplacé par unit ou objectgroup
        - L'accès à une Cycle de vie se fait via:
          - GET /xxxxxlifecycles/id_lc qui retourne la liste de tous les événements (modulo query)
          - où xxxxx est remplacé par unit ou objectgroup
        - L'accès via operations filtre le contenu du cycle de vie à l'opération:
          - GET /operations/id_op/xxxxxlifecycles/id_lc
          - où xxxxx est remplacé par unit ou objectgroup
        - Le test d'existence d'un cycle de vie se fait via:
          - HEAD /operations/id_op/xxxxxlifecycles/id_lc qui retourne 200 si il existe
          - HEAD /xxxxxlifecycles/id_lc
          - où xxxxx est remplacé par unit ou objectgroup
        - La liste des Cycle de vies (Unit ou ObjectGroup) concernées par une opération:
          - GET /operations/id_op/xxxxxlifecycles
          - où xxxxx est remplacé par unit ou objectgroup
        - Le cas particulier de la destruction d'un journal du cycle de vie (en cas d'erreur durant une opération d'entrée ou après une destruction) se fait via:
          - DELETE /operations/id_op/xxxxxlifecycles/id_lc
          - où xxxxx est remplacé par unit ou objectgroup
      Questions ou remarques:
        - Vu le nombre de cycles de vie et d'événements internes, la proposition est de créer un fichier contenant les informations par cycle de vie (sécurisé sur le moteur de stockage) et de ne garder que les x derniers mois en base (au grain fin opération/événement). A noter que pour chaque item (Unit / ObjectGroup), un champ "\_ops" contient la liste des opérations auxquelles cet item a participé activement (une entrée est créée dans son cycle de vie).

/operations:
  # root endpoint request
  displayName: Operations Journal
  description: Administration du Journal des Opérations (Entrées, Audit, Préservation, ...) en lecture et création.
  type: base
  is: [ standardErrors, standardHeaders ]
  get:
    description: Liste du contenu d'une collection.
    body:
      application/json:
        schema: collectionQuery
        example: !include samples/query-simple.sample
    responses:
      200:
        body:
          application/json:
            schema: collectionList
            example: !include samples/answearList.sample
  post:
    description: Bulk creation d'une operation (délégataire)
    body:
      application/json:
        schema: logbooks
        example: !include samples/sampleLogbooks.sample
    responses:
      200:
        body:
          application/json:
            schema: logbooks
            example: !include samples/sampleLogbooks.sample
  put:
    description: Bulk update d'une operation (délégataire)
    body:
      application/json:
        schema: logbooks
        example: !include samples/sampleLogbooks.sample
    responses:
      200:
        body:
          application/json:
            schema: logbooks
            example: !include samples/sampleLogbooks.sample


  /{id_op}:
    displayName: Operation Entry
    description: Administration du Journal des Opérations (lecture et ajout)
    type: { collection-item-append: { getModel: collectionQuery, exampleGetModel: !include samples/collectionQuery.sample, appendModel: logbook, exampleAppendModel: !include samples/sampleLogbook.sample, answearGetModel: logbooks, exampleAnswearGetModel: !include samples/sampleLogbooks.sample, answearAppendModel: logbooks, exampleAnswearAppendModel: !include samples/sampleLogbooks.sample } }
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet d'accéder aux informations d'une entrée du journal des opérations
      body:
        application/json:
          schema: collectionQuery
          example: !include samples/query-simple.sample
    post:
      description: Permet de créer une nouvelle entrée (nouvelle opération)
    put:
      description: Permet d'ajouter un item à l'opération en cours
    head:
      description: Permet de savoir si une opération existe

    /unitlifecycles:
      # root endpoint request
      displayName: Unit Life Cycle Journal
      description: Administration du Journal du Cycle de Vie des archives (Unit ou ObjectGroup) associés à une opération.
      type: base
      is: [ standardErrors, standardHeaders ]
      get:
        description: Liste du contenu d'une collection.
        body:
          application/json:
            schema: collectionQuery
            example: !include samples/query-simple.sample
        responses:
          200:
            body:
              application/json:
                schema: collectionList
                example: !include samples/answearList.sample

      /{id_lc}:
        displayName: Unit Life Cycle Entry
        description: Administration du Journal du Cycle de Vie d'une archive (Unit ou ObjectGroup) associés à une opération
        type: { collection-item-append: { getModel: collectionQuery, exampleGetModel: !include samples/collectionQuery.sample, appendModel: logbook, exampleAppendModel: !include samples/sampleLogbook.sample, answearGetModel: logbooks, exampleAnswearGetModel: !include samples/sampleLogbooks.sample, answearAppendModel: logbooks, exampleAnswearAppendModel: !include samples/sampleLogbooks.sample } }
        is: [ standardErrors, standardHeaders ]
        get:
          description: Permet d'accéder aux informations d'un journal du cycle de vie pour une archive associés à une opération
        post:
          description: Permet de créer une nouvelle entrée (création du journal de cycle de vie d'une archive s'il n'existe pas déjà) associés à une opération. L'identifiant de ce journal est l'identifiant du Unit ou ObjectGroup.
        put:
          description: Permet d'ajouter un événement au cycle de vie d'une archive associés à une opération
        delete:
          description: Permet de détruire un cycle de vie (rollback d'une opération d'ingest ou après une destruction d'archives)
        head:
          description: Permet de savoir si un cycle de vie existe

    /objectgrouplifecycles:
      # root endpoint request
      displayName: ObjectGroup Life Cycle Journal
      description: Administration du Journal du Cycle de Vie des archives (Unit ou ObjectGroup) associés à une opération.
      type: base
      is: [ standardErrors, standardHeaders ]
      get:
        description: Liste du contenu d'une collection.
        body:
          application/json:
            schema: collectionQuery
            example: !include samples/query-simple.sample
        responses:
          200:
            body:
              application/json:
                schema: collectionList
                example: !include samples/answearList.sample

      /{id_lc}:
        displayName: ObjectGroup Life Cycle Entry
        description: Administration du Journal du Cycle de Vie d'une archive (Unit ou ObjectGroup) associés à une opération
        type: { collection-item-append: { getModel: collectionQuery, exampleGetModel: !include samples/collectionQuery.sample, appendModel: logbook, exampleAppendModel: !include samples/sampleLogbook.sample, answearGetModel: logbooks, exampleAnswearGetModel: !include samples/sampleLogbooks.sample, answearAppendModel: logbooks, exampleAnswearAppendModel: !include samples/sampleLogbooks.sample } }
        is: [ standardErrors, standardHeaders ]
        get:
          description: Permet d'accéder aux informations d'un journal du cycle de vie pour une archive associés à une opération
        post:
          description: Permet de créer une nouvelle entrée (création du journal de cycle de vie d'une archive s'il n'existe pas déjà) associés à une opération. L'identifiant de ce journal est l'identifiant du Unit ou ObjectGroup.
        put:
          description: Permet d'ajouter un événement au cycle de vie d'une archive associés à une opération
        delete:
          description: Permet de détruire un cycle de vie (rollback d'une opération d'ingest ou après une destruction d'archives)
        head:
          description: Permet de savoir si un cycle de vie existe

/unitlifecycles:
  # root endpoint request
  displayName: Unit Life Cycle Journal
  description: Administration du Journal du Cycle de Vie des archives (Unit ou ObjectGroup).
  type: base
  is: [ standardErrors, standardHeaders ]
  get:
    description: Liste du contenu d'une collection.
    body:
      application/json:
        schema: collectionQuery
        example: !include samples/query-simple.sample
    responses:
      200:
        body:
          application/json:
            schema: collectionList
            example: !include samples/answearList.sample

  /{id_lc}:
    displayName: Unit Life Cycle Entry
    description: Administration du Journal du Cycle de Vie d'une archive (Unit ou ObjectGroup)
    type: { collection-item-append: { getModel: collectionQuery, exampleGetModel: !include samples/collectionQuery.sample, appendModel: logbook, exampleAppendModel: !include samples/sampleLogbook.sample, answearGetModel: logbooks, exampleAnswearGetModel: !include samples/sampleLogbooks.sample, answearAppendModel: logbooks, exampleAnswearAppendModel: !include samples/sampleLogbooks.sample } }
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet d'accéder aux informations d'un journal du cycle de vie pour une archive
    head:
      description: Permet de savoir si un cycle de vie existe


/objectgrouplifecycles:
  # root endpoint request
  displayName: ObjectGroup Life Cycle Journal
  description: Administration du Journal du Cycle de Vie des archives (Unit ou ObjectGroup).
  type: base
  is: [ standardErrors, standardHeaders ]
  get:
    description: Liste du contenu d'une collection.
    body:
      application/json:
        schema: collectionQuery
        example: !include samples/query-simple.sample
    responses:
      200:
        body:
          application/json:
            schema: collectionList
            example: !include samples/answearList.sample

  /{id_lc}:
    displayName: ObjectGroup Life Cycle Entry
    description: Administration du Journal du Cycle de Vie d'une archive (Unit ou ObjectGroup)
    type: { collection-item-append: { getModel: collectionQuery, exampleGetModel: !include samples/collectionQuery.sample, appendModel: logbook, exampleAppendModel: !include samples/sampleLogbook.sample, answearGetModel: logbooks, exampleAnswearGetModel: !include samples/sampleLogbooks.sample, answearAppendModel: logbooks, exampleAnswearAppendModel: !include samples/sampleLogbooks.sample } }
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet d'accéder aux informations d'un journal du cycle de vie pour une archive
    head:
      description: Permet de savoir si un cycle de vie existe

/status:
  displayName: Logbook Engine Status
  description: Statut du moteur de journalisation.
  type: { statusCollection }
  is: [ standardErrors, standardHeaders ]
