#%RAML 0.8
title: Moteur de Données
baseUri: http://server-internal/metadata/{version}
version: v0.0.5
protocols: [ HTTP ]

mediaType: application/json

securitySchemes:
  - x-vitam-platform-key:
      type: x-hedader-key
      description: Vitam Platform Key
      describedBy:
        headers:
          x-vitam-key:
            type: string

securedBy: [ x-vitam-platform-key ]

schemas:
  - error: !include schema/error.json
  - query: !include schema/query.json
  - create: !include schema/create.json
  - update: !include schema/update.json
  - delete: !include schema/delete.json
  - unit: !include schema/generic_object.json
  - objectgroup: !include schema/generic_object.json
  - status: !include schema/status.json
  - answear: !include schema/answear.json

traits: !include traits/Traits.raml

resourceTypes: !include resourceTypes/InternalResourceTypes.raml

documentation:
  - title: Units
    content: |
      Le principe proposé serait le suivant:
        - Pas de PUT à ce stade
        - Un seul ObjectGroup par Unit max
        - Une requête depuis un Unit signifie recherche relative depuis celui-ci (roots = this)
        - Accept: application/json signifie les métadonnées au format d'un seul Json
        - Accept: application/zip signifie les métadonnées au format de multiples Json regroupés
        - Accept: application/octet-stream n'est pas pris en compte par ce moteur mais il retournera l'ID de l'Object

  - title: ObjectGroups
    content: |
      Le principe proposé serait le suivant:
        - Pas de PUT à ce stade
        - Une requête depuis un objectgroup signifie recherche relative depuis celui-ci (roots = this)
        - Accept: application/json signifie les métadonnées au format d'un seul Json
        - Accept: application/zip signifie les métadonnées au format de multiples Json regroupés
        - Accept: application/octet-stream n'est pas pris en compte par ce moteur mais il retournera l'ID de l'Object

      Questions ou remarques:
        - Comment accéder aux Object d'un ObjectGroup ?
        - Est-ce au moteur de données de faire le ZIP ? Ou faut il que ce soit l'appelant ?

/units:
  # root endpoint request
  displayName: Query on Units collection
  description: API interne du moteur de données sur les Units.
  type: { collection-write }
  is: [ standardErrors, standardHeaders ]
  delete:
    description: Permet de détruire des Units

  /{id_unit}:
    displayName: Query on 1 Unit
    description: API interne du moteur de données sur 1 Unit.
    type: { collection-item-metadata: { answearModel: answear, exampleAnswearModel: !include samples/answearUnit.sample } }
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet d'accéder aux informations d'un Unit à partir de ce Unit
    post:
      description: Permet de créer un nouvel Unit, la requête contenant les éventuels parents
    delete:
      description: Permet d'effacer un Unit à partir de ce Unit
    put:
      description: Permet de mettre à jour un Unit à partir de ce Unit

    /objectgroup:
      # root endpoint request
      displayName: Query on 1 ObjectGroup linked to this Unit
      description: API interne du moteur de données sur 1 ObjectGroup.
      type: { collection-item-write: { answearModel: answear, exampleAnswearModel: !include samples/answearObjectGroup.sample } }
      is: [ standardErrors, standardHeaders ]
      get:
        description: Permet d'accéder aux informations d'un ObjectGroup attaché à ce Unit
#      post:
#        description: Permet de créer un ObjectGroup sous ce Unit
      put:
        description: Permet d'associer un ObjectGroup pré-existant à ce Unit (s'il n'existe pas => 404)
        responses:
          200:
            body:
              application/json:
                schema: objectgroup
                example: !include samples/sampleObject.sample
      delete:
        description: Permet d'effacer l'ObjectGroup rattaché à ce Unit (supprime le lien)
#      patch:
#        description: Permet de mettre à jour cet ObjectGroup attaché à ce Unit

/objectgroups:
  # root endpoint request
  displayName: Query on ObjectGroups collection
  description: API interne du moteur de données sur les ObjectGroups.
  type: { collection-write }
  is: [ standardErrors, standardHeaders ]
  delete:
    description: Permet de détruire des ObjectGroups

  /{id_og}:
    displayName: Query on 1 ObjectGroup
    description: API interne du moteur de données sur 1 ObjectGroup.
    type: { collection-item-metadata: { answearModel: answear, exampleAnswearModel: !include samples/answearObjectGroup.sample } }
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet d'accéder aux informations d'un ObjectGroup
    post:
      description: Permet de créer un nouvel ObjectGroup
    patch:
      description: Permet de mettre à jour un ObjectGroup
    delete:
      description: Permet d'effacer un ObjectGroup

/status:
  displayName: Metadata Engine Status
  description: Statut du moteur de données.
  type: { statusCollection }
  is: [ standardErrors, standardHeaders ]
