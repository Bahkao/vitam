#%RAML 0.8
title: Moteur d'Execution
baseUri: http://server-internal/processing/api/{version}
version: v0.0.5
protocols: [ HTTP ]

mediaType: application/json

securitySchemes:
  - x-vitam-platform-key:
      type: x-hedader-key
      description: Vitam Platform Key
      describedBy:
        headers:
          x-vitam-key:
            type: string

securedBy: [ x-vitam-platform-key ]

traits: !include traits/Traits.raml

resourceTypes: !include resourceTypes/InternalResourceTypes.raml

documentation:
  - title: Workflows
    content: |
      Le principe proposé serait le suivant:
        - Permet de soumettre un workflow à l'exécution:
          - POST /operations
        - Permet d'intervenir sur le comportement de l'exécution et de la distribution (pause, cancel, restart, priorité)
          - PATCH /operations/id_async
        - Permet à un worker d'informer de la fin d'exécution d'une étape pour un item
          - PATCH /operations/id_async

  - title: Worker_Classes
    content: |
      Le principe proposé serait le suivant:
        - Permet de définir les Workers dans des classes (Pool = autre nom ?)
        - Ne permet pas d'interagir directement avec les Workers (il s'agit de la vision Moteur)
        - Un worker s'enregistre auprès du moteur via:
          - POST /worker_classes/id_class/workers intégrant le workerId

      Questions ou remarques:
        - Le /status pourrait être étendu pour remonter un état statistique du moteur

/operations:
  # root endpoint request
  displayName: Operations
  description: Administration des Workflows Asynchrones (opérations).
  type: base
  is: [ standardErrors, standardHeaders ]
  get:
    description: Permet de lister les opérations en cours
    body:
      application/json:
        example: !include samples/collectionQuery.sample
    responses:
      200:
        body:
          application/json:
            example: !include samples/collectionList.sample
  post:
    description: Permet de soumettre une opération (workflow + contexte + lot)
    body:
      application/json:
        example: !include samples/workflow.sample
    responses:
      201:
        body:
          application/json:
            example: !include samples/async_status.sample
  put:
    description: Permet si nécessaire d'interagir avec une opération (pause, reprise, repriorisation par exemple)
    body:
      application/json:
        example: !include samples/genericSample.sample
    responses:
      200:
        body:
          application/json:
            example: !include samples/async_status.sample

  /{id_async}:
    displayName: Operation
    type: base
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet de récupérer le statut du workflow en cours
      responses:
        202:
          body:
            application/json:
              example: !include samples/async_status.sample
        200:
          body:
            application/json:
              schema: genericObject
              example: !include samples/workflow.sample
    put:
      description: Permet si nécessaire d'interagir avec une opération (pause, reprise, repriorisation par exemple, mais permettrait aussi à un Worker d'indiquer la fin d'une étape pour un item)
      body:
        application/json:
          example: !include samples/genericSample.sample
      responses:
        200:
          body:
            application/json:
              example: !include samples/async_status.sample

/worker_classes:
  # root endpoint request
  displayName: Worker's Classes
  description: Administration des Classes de Workers.
  type: base
  is: [ standardErrors, standardHeaders ]
  get:
    description: Permet de lister les opérations en cours
    body:
      application/json:
        example: !include samples/collectionQuery.sample
    responses:
      200:
        body:
          application/json:
            example: !include samples/collectionList.sample
  put:
    description: Permet si nécessaire d'interagir avec les workers de la classe
    body:
      application/json:
        example: !include samples/genericSample.sample
    responses:
      200:
        body:
          application/json:
            example: !include samples/async_status.sample

  /{id_class}:
    displayName: Worker Class
    type: base
    is: [ standardErrors, standardHeaders ]
    get:
      description: Permet de récupérer le statut de la Classe (point de vue Moteur)
      responses:
        200:
          body:
            application/json:
              example: !include samples/processing.sample
    post:
      description: Permet de créer une classe de Worker (utile ?)
      body:
        application/json:
          example: !include samples/class.sample
      responses:
        201:
          body:
            application/json:
              example: !include samples/processing.sample
    put:
      description: Permet si nécessaire d'interagir avec la classe
      body:
        application/json:
          example: !include samples/genericSample.sample
      responses:
        200:
          body:
            application/json:
              example: !include samples/async_status.sample
    delete:
      description: Efface une Classe si vide
      responses:
        200:
          body:
            application/json:
              example: !include samples/async_status.sample
    /workers:
      displayName: Workers
      description: API de gestion des Workers d'une Classe.
      type: base
      is: [ standardErrors, standardHeaders ]
      get:
        description: Permet de sélectionner un sous-ensemble de Workers.
        body:
          application/json:
            example: !include samples/collectionQuery.sample
        responses:
          200:
            body:
              application/json:
                example: !include samples/collectionList.sample
      delete:
        description: Efface un sous-ensemble de Workers.
        body:
          application/json:
            example: !include samples/collectionQuery.sample
        responses:
          200:
            body:
              application/json:
                example: !include samples/collectionList.sample

      /{id_worker}:
        displayName: Worker
        description: API permettant la gestion d'un Worker.
        type: base
        is: [ standardErrors, standardHeaders ]
        get:
          description: Accès à un statut d'un Worker (vision Moteur).
          responses:
            200:
              body:
                application/json:
                  example: !include samples/processing.sample
        post:
          description: Ajoute un nouveau Worker (abonnement) dans une Classe.
          body:
            application/json:
              example: !include samples/worker.sample
          responses:
            201:
              body:
                application/json:
                  example: !include samples/processing.sample
        put:
          description: Mise à jour d'un paramètre pour ce Worker (vision Moteur)
          body:
            application/json:
              example: !include samples/genericSample.sample
          responses:
            200:
              body:
                application/json:
                  example: !include samples/async_status.sample
        delete:
          description: Permet le retrait d'un Worker à cete Classe (désabonnement).
          responses:
            200:
              body:
                application/json:
                  example: !include samples/processing.sample

/status:
  displayName: Executor Engine Status
  description: Statut du moteur d'exécution, comme sa charge actuelle.
  type: { statusCollection }
  is: [ standardErrors, standardHeaders ]
