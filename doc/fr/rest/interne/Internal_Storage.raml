#%RAML 0.8
title: Moteur de Stockage
baseUri: http://server-internal/storage/{version}
version: v0.0.6
protocols: [ HTTP ]

mediaType: application/json

securitySchemes:
  - x-vitam-platform-key:
      type: x-hedader-key
      description: Vitam Platform Key
      describedBy:
        headers:
          x-vitam-key:
            type: string

securedBy: [ x-vitam-platform-key ]

schemas:
  - error: !include schema/error.json
  - genericObject: !include schema/generic_object.json
  - containerInfo: !include schema/containerInfo.json
  - storedInfo: !include schema/storedInfo.json
  - collectionList: !include schema/collection_list.json
  - collectionQuery: !include schema/collection_query.json
  - logbook: !include schema/logbook.json
  - logbooks: !include schema/logbooks.json
  - unit: !include schema/generic_object.json
  - objectgroup: !include schema/generic_object.json
  - status: !include schema/status.json

traits: !include traits/Traits.raml

resourceTypes: !include resourceTypes/InternalResourceTypes.raml

documentation:
  - title: Containers
    content: |
      Le principe proposé serait le suivant:
        - Accès principal au travers d'un Container = Tenant
        - 3 types sous-jacents:
          - Objects: pour les éléments binaires (non modifiable = WORM)
          - Logbooks: pour les journaux (tous) (non modifiable = WORM)
          - Metadatas: pour les Units et ObjectGroups (modifiable = WMRM => PUT)

      Questions ou remarques:
        - Le moteur de stockage est responsable de mettre le "Folder" sous-jacent nécessaire pour séparer les types.

/:
  displayName: Containers Administration
  description: API de gestion de Containers.
  type: { collection-item: { answearModel: containerInfo, exampleAnswearModel: !include samples/containerInfo.sample } }
  is: [ standardErrors, standardHeaders, storageHeaders, strategyStorage ]
  get:
    description: Permet d'accéder aux informations d'un container
  post:
    description: Permet de créer un nouveau container (nouveau tenant)
    responses:
      201:
        body:
          application/json:
            schema: containerInfo
            example: !include samples/containerInfo.sample
  delete:
    description: Permet d'effacer un Container (si vide)
    responses:
      204:
  head:
    description: Permet de tester l'existence du Container
    responses:
      200:

/objects:
  # root endpoint request
  displayName: Objects operations
  description: Pour gérer la création de nouveaux Objects, sur la base d'une stratégie de stockage à appliquer
  type: base
  is: [ standardErrors, storageHeaders, strategyStorage ]
  get:
    description: Liste du contenu binaire pour ce tenant.
    body:
      application/json:
        schema: collectionQuery
        example: !include samples/collectionQuery.sample
    responses:
      200:
        body:
          application/json:
            schema: collectionList
            example: !include samples/collectionList.sample

  /{id_object}:
    displayName: Object operations
    type: base
    is: [ standardErrors, storageHeaders, strategyStorage ]
    get:
      description: Permet de lire un Object
      is: [ allows ]
      responses:
        200:
          body:
            binary/octet-stream:
              example: !include samples/binaryObject.sample
            application/json:
              schema: storedInfo
              example: !include samples/storedInfo.sample
    post:
      description: Permet de créer une nouveau Object.
      body:
        binary/octet-stream:
        multipart/form-data:
          formParameters:
            objectGroupId:
              description: Id of the parent ObjectGroup
              type: string
            unitId:
              description: Ids of the parent Units, comma separated
              type: string
            file:
              description: The file to be uploaded
              required: true
              type: file
      responses:
        201:
          body:
            application/json:
              schema: storedInfo
              example: !include samples/storedInfo.sample
    delete:
      description: Permet de détruire un Object
      is: [ storageHeaders, digestDelete ]
      responses:
        200:
          headers:
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string
          body:
            application/json:
              schema: storedInfo
              example: !include samples/storedInfo.sample
    head:
      description: Permet d'obtenir des informations sur l'objet
      headers:
        X-digest-algorithm:
          description: Digest Algorithm
          type: string
      responses:
        200:
          headers:
            X-digest:
              description: Digests value in order of Strategy, comma separated
              type: string
            X-digest-algorithm:
              description: Digest Algorithm
              type: string
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string

/logbooks:
  # root endpoint request
  displayName: Logbooks operations
  description: Pour gérer la création de nouveaux Journaux, sur la base d'une stratégie de stockage à appliquer
  type: { collection-write-storage: { createModel: logbooks, exampleModel: !include samples/sampleLogbooks.sample, answearModel: genericObject, exampleAnswearModel: !include samples/genericSample.sample } }
  is: [ standardErrors, storageHeaders, strategyStorage ]

  /{id_logbook}:
    displayName: Logbook operations
    type: { collection-item-storage: { answearModel: logbooks, exampleAnswearModel: !include samples/sampleLogbooks.sample } }
    is: [ standardErrors, storageHeaders, strategyStorage ]
    get:
      description: Permet de lire un Journal
    post:
      description: Permet de créer un nouveau Journal
      body:
        application/json:
          schema: logbooks
          example: !include samples/sampleLogbooks.sample
      responses:
        201:
          body:
            application/json:
              schema: logbooks
              example: !include samples/sampleLogbooks.sample
    delete:
      description: Permet de détruire un Journal
      is: [ storageHeaders, digestDelete ]
      responses:
        200:
          headers:
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string
    head:
      description: Permet d'obtenir des informations sur le journal
      headers:
        X-digest-algorithm:
          description: Digest Algorithm
          type: string
      responses:
        200:
          headers:
            X-digest:
              description: Digests value in order of Strategy, comma separated
              type: string
            X-digest-algorithm:
              description: Digest Algorithm
              type: string
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string

/units:
  # root endpoint request
  displayName: Unit Metadatas operations
  description: Pour gérer la création de nouvelles Units, sur la base d'une stratégie de stockage à appliquer
  type: { collection-write-storage: { createModel: genericObject, exampleModel: !include samples/sampleUnit.sample, answearModel: genericObject, exampleAnswearModel: !include samples/sampleUnit.sample } }
  is: [ standardErrors, storageHeaders, strategyStorage ]

  /{id_md}:
    displayName: Unit Metadata operations
    type: { collection-item-storage: { answearModel: genericObject, exampleAnswearModel: !include samples/sampleUnit.sample } }
    is: [ standardErrors, storageHeaders, strategyStorage ]
    get:
      description: Permet de lire un Unit Metadata
    post:
      description: Permet de créer un nouveau Unit Metadata
      body:
        application/json:
          schema: genericObject
          example: !include samples/sampleUnit.sample
      responses:
        201:
          body:
            application/json:
              schema: genericObject
              example: !include samples/sampleUnit.sample
    put:
      description: Permet de mettre à jour un Unit Metadata (404 si non pré-existant)
      body:
        application/json:
          schema: genericObject
          example: !include samples/sampleUnit.sample
      responses:
        200:
          body:
            application/json:
              schema: genericObject
              example: !include samples/sampleUnit.sample
    delete:
      description: Permet de détruire un Unit Metadata
      is: [ storageHeaders, digestDelete ]
      responses:
        200:
          headers:
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string
    head:
      description: Permet d'obtenir des informations sur la métadonnée
      headers:
        X-digest-algorithm:
          description: Digest Algorithm
          type: string
      responses:
        200:
          headers:
            X-digest:
              description: Digests value in order of Strategy, comma separated
              type: string
            X-digest-algorithm:
              description: Digest Algorithm
              type: string
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string

/objectgroups:
  # root endpoint request
  displayName: ObjectGroup Metadatas operations
  description: Pour gérer la création de nouveaux ObjectGroup, sur la base d'une stratégie de stockage à appliquer
  type: { collection-write-storage: { createModel: genericObject, exampleModel: !include samples/sampleUnit.sample, answearModel: genericObject, exampleAnswearModel: !include samples/sampleUnit.sample } }
  is: [ standardErrors, storageHeaders, strategyStorage ]

  /{id_md}:
    displayName: ObjectGroup Metadata operations
    type: { collection-item-storage: { answearModel: genericObject, exampleAnswearModel: !include samples/sampleUnit.sample } }
    is: [ standardErrors, storageHeaders, strategyStorage ]
    get:
      description: Permet de lire un ObjectGroup Metadata
    post:
      description: Permet de créer un nouveau ObjectGroup Metadata
      body:
        application/json:
          schema: genericObject
          example: !include samples/sampleUnit.sample
      responses:
        201:
          body:
            application/json:
              schema: genericObject
              example: !include samples/sampleUnit.sample
    put:
      description: Permet de mettre à jour un ObjectGroup Metadata (404 si non pré-existant)
      body:
        application/json:
          schema: genericObject
          example: !include samples/sampleUnit.sample
      responses:
        200:
          body:
            application/json:
              schema: genericObject
              example: !include samples/sampleUnit.sample
    delete:
      description: Permet de détruire un ObjectGroup Metadata
      is: [ storageHeaders, digestDelete ]
      responses:
        200:
          headers:
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string
    head:
      description: Permet d'obtenir des informations sur la métadonnée
      headers:
        X-digest-algorithm:
          description: Digest Algorithm
          type: string
      responses:
        200:
          headers:
            X-digest:
              description: Digests value in order of Strategy, comma separated
              type: string
            X-digest-algorithm:
              description: Digest Algorithm
              type: string
            X-Strategy-Id:
              description: Identifiant de la Stratégie pour Offres de stockage et Copies (conservation)
              type: string

/status:
  displayName: Storage Engine Status
  description: Statut du moteur de stockage.
  type: { statusCollection }
  is: [ standardErrors, standardHeaders ]
