#%RAML 0.8
title: Access External Module
baseUri: http://server/api/access/{version}
version: v0.0.4
protocols: [ HTTPS ]
      
mediaType: application/json

securitySchemes:
  - basic:
      type: Basic Authentication

securedBy: [ basic ]

schemas:
  - error: !include schema/error.json
  - answear: !include schema/answear.json
  - answearList: !include schema/answearList.json
  - create: !include schema/create.json
  - update: !include schema/update.json
  - delete: !include schema/delete.json
  - query: !include schema/query.json
  - collectionList: !include schema/collection_list.json
  - collectionQuery: !include schema/collection_query.json
  - genericObject: !include schema/generic_object.json
  - projection: !include schema/projection.json
  - root: !include schema/root.json

traits: !include traits/Traits.raml

resourceTypes: !include resourceTypes/ResourceTypes.raml

documentation:
  - title: Racine
    content: |
      Cet URI permettrait à une application cliente de requêter les services disponibles.
      
  - title: Units
    content: |
      Le principe proposé serait le suivant:
        - Pas de PUT à ce stade
        - Pas de DELETE et POST car ceci relève de l'Ingest
        - Un seul ObjectGroup par Unit max
        - Une requête depuis un Unit signifie recherche relative depuis celui-ci (roots = this)
        - Accept: application/json signifie les métadonnées au format d'un seul Json
        - Accept: application/zip signifie les métadonnées au format de multiples Json regroupés
        - Accept: application/octet-stream signifie le retour du contenu binaire de l'Object
              
  - title: ObjectGroups
    content: |
      Le principe proposé serait le suivant:
        - Pas de PUT à ce stade
        - Pas de DELETE et POST car ceci relève de l'Ingest
        - Une requête depuis un objectgroup signifie recherche relative depuis celui-ci (roots = this)
        - Accept: application/json signifie les métadonnées au format d'un seul Json
        - Accept: application/zip signifie les métadonnées au format de multiples Json regroupés
        - Accept: application/octet-stream signifie le retour du contenu binaire de l'Object
          
      Questions ou remarques:
        - Comment accéder aux Object d'un ObjectGroup ? Réfkexion à mener sur les "usages" et "versions"

# General
/: !include resourceTypes/External_Roots.raml

# Access
/units:
  # root endpoint request
  displayName: Units
  description: API qui définie les requêtes pour accéder aux Unités. La requête utiliser le langage de requête (DSL) de Vitam en entrée et retourne une liste d'identifiants uniques en cas de succès.
  type: { complexCollection: { queryModel: query, exampleQueryModel: !include samples/query.sample, answearModel: answearList, exampleAnswearModel: !include samples/answearList.sample, updateModel: update, exampleUpdateModel: !include samples/update.sample, createModel: create, exampleCreateModel: !include samples/create.sample } }
  is: [ standardErrors ]
  get:
    description: Requête qui aura pour résultat un ensemble d'identifiants uniques de Units.
    is: [ allows ]
    responses:
      200:
        body:
          application/octet-stream:
            example: !include samples/binaryObject.sample
          application/zip:
  patch:
    description: Met à jour un ensemble de Units (mise à jour massive). Cette commande peut être utile par exemple pour mettre à jour massivement des métadonnées pour préparer ou changer des règles d'élimination.
  
  /{id_unit}:
    displayName: Unit
    description: API qui définie l'accès direct à une Unité.
    type: { collection-item-write: { createModel: update, exampleModel: !include samples/update.sample, answearModel: genericObject, exampleAnswearModel: !include samples/sampleUnit.sample } }
    is: [ standardErrors ]
    get:
      description: Par défaut retourne les métadonnées complètes, sinon l'Object ou les deux selon le header 'Accept'. Le 'body' optionnel permet de décider quelle partie des métadonnées sont requises en résultat (projection).
      is: [ allows ]
      responses:
        200:
          body:
            application/octet-stream:
              example: !include samples/binaryObject.sample
            application/zip:
    patch:
      description: Permet de mettre à jour un Unit à partir de ce Unit

    /object:
      # root endpoint request
      displayName: Query on 1 ObjectGroup linked to this Unit
      description: API interne du moteur de données sur 1 ObjectGroup.
      type: { collection-item-write: { createModel: update, exampleModel: !include samples/update.sample, answearModel: genericObject, exampleAnswearModel: !include samples/sampleObject.sample } }
      is: [ standardErrors, allows ]
      get:
        description: Permet d'accéder aux informations d'un ObjectGroup
        responses:
          200:
            body:
              application/octet-stream:
                example: !include samples/binaryObject.sample
              application/zip:

/objects:
  # root endpoint request
  displayName: Query on ObjectGroups collection
  description: API interne du moteur de données sur les ObjectGroups.
  type: { complexCollection: { queryModel: query, exampleQueryModel: !include samples/query.sample, answearModel: answearList, exampleAnswearModel: !include samples/answearList.sample, updateModel: update, exampleUpdateModel: !include samples/update.sample, createModel: create, exampleCreateModel: !include samples/create.sample } }
  is: [ standardErrors, allows ]
  get:
    description: Requête qui aura pour résultat un ensemble d'identifiants uniques de Units.
    responses:
      200:
        body:
          application/octet-stream:
            example: !include samples/binaryObject.sample
          application/zip:

  /{id_og}:
    displayName: Query on 1 ObjectGroup
    description: API interne du moteur de données sur 1 ObjectGroup.
    type: { collection-item-write: { createModel: update, exampleModel: !include samples/update.sample, answearModel: genericObject, exampleAnswearModel: !include samples/sampleObject.sample } }
    is: [ standardErrors, allows ]
    get:
      description: Permet d'accéder aux informations d'un ObjectGroup
      responses:
        200:
          body:
            application/octet-stream:
              example: !include samples/binaryObject.sample
            application/zip:
            