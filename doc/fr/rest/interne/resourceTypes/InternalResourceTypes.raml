- base: !include Base.raml

- complexCollection: !include ComplexCollection.raml

- stats: !include Stats.raml

- statusCollection:
    description: API de status du Module/Moteur
    type: base
    get:
      description: Affichage du statut du Module / Moteur
      responses:
        200:
          body:
            application/json:
              schema: status
              example: !include ../samples/status.sample

- collection:
    description: API de Gestion standard d'une collection de <<resourcePathName>>.
    type: base
    get:
      is: [ standardErrors ]
      description: Liste du contenu d'une collection.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/collectionQuery.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample

- collection-write:
    description: API de Gestion standard d'une collection de <<resourcePathName>> autorisant les écritures.
    type: base
    is: [ standardErrors ]
    get:
      description: Liste du contenu dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/query.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/answearList.sample
    post?:
      description: Création d'un item dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/create.sample
      responses:
        201:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/answearList.sample
    patch?:
      description: Mise à jour d'un ensemble d'items dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/update.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/answearList.sample
    delete?:
      description: Effacement d'un ensemble d'items depuis la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/delete.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/answearList.sample

- collection-write-nopatch:
    description: API de Gestion standard d'une collection de <<resourcePathName>> autorisant les écritures.
    type: base
    is: [ standardErrors ]
    get:
      description: Liste du contenu d'une collection.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/collectionQuery.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample
    post?:
      description: Création d'un item dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: <<createModel>>
          example: <<exampleModel>>
      responses:
        201:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    patch?:
      description: Mise à jour d'un ensemble d'items dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: <<createModel>>
          example: <<exampleModel>>
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample
    delete?:
      description: Effacement d'un ensemble d'items depuis la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/collectionQuery.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample

- collection-write-storage:
    description: API de Gestion standard d'une collection de <<resourcePathName>> autorisant les écritures.
    type: base
    is: [ standardErrors ]
    get:
      description: Liste du contenu d'une collection.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/collectionQuery.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample
    post?:
      description: Création d'un item dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: <<createModel>>
          example: <<exampleModel>>
      responses:
        201:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    patch?:
      description: Mise à jour d'un ensemble d'items dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: <<createModel>>
          example: <<exampleModel>>
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample
    delete?:
      description: Effacement d'un ensemble d'items depuis la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/collectionQuery.sample
      responses:
        200:
          body:
            application/json:
              schema: collectionList
              example: !include ../samples/collectionList.sample

- collection-item:
    description: API de Gestion standard d'un item d'une collection de <<resourcePathName>>.
    type: base
    get:
      is: [ standardErrors, allows ]
      description: Accès à un item dans la collection.
      body:
        application/json:
          schema: projection
          example: !include ../samples/projection.sample
      responses:
        200:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>

- collection-item-append:
    description: API de Gestion standard d'un item d'une collection de <<resourcePathName>> autorisant les écritures en mode append.
    type: base
    is: [ standardErrors ]
    get:
      is: [ allows ]
      description: Accès à un item dans la collection.
      body:
        application/json:
          schema: <<getModel>>
          example: <<exampleGetModel>>
      responses:
        200:
          body:
            application/json:
              schema: <<answearGetModel>>
              example: <<exampleAnswearGetModel>>
    post?:
      description: Ajout (append) d'un sous-item dans la collection pour cet item.
      body:
        application/json:
          schema: <<appendModel>>
          example: <<exampleAppendModel>>
      responses:
        201:
          body:
            application/json:
              schema: <<appendModel>>
              example: <<exampleAppendModel>>
    put?:
      description: Ajout (append) d'un sous-item dans la collection pour cet item.
      body:
        application/json:
          schema: <<appendModel>>
          example: <<exampleAppendModel>>
      responses:
        200:
          body:
            application/json:
              schema: <<answearAppendModel>>
              example: <<exampleAnswearAppendModel>>

- collection-item-write:
    description: API de Gestion standard d'un item d'une collection de <<resourcePathName>> autorisant les écritures et/ou les effacements.
    type: base
    is: [ standardErrors ]
    get:
      is: [ allows ]
      description: Accès à un item dans la collection en utilisant l'item courant comme racine.
      body:
        application/json:
          schema: query
          example: !include ../samples/query.sample
      responses:
        200:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    post?:
      description: Ajout d'un item dans la collection en utilisant l'item courant comme racine.
      body:
        application/json:
          schema: create
          example: !include ../samples/create.sample
      responses:
        201:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    patch?:
      description: Mise à jour d'un item dans la collection en utilisant l'item courant comme racine.
      body:
        application/json:
          schema: update
          example: !include ../samples/update.sample
      responses:
        200:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    delete?:
      description: Effacement d'un item dans la collection en utilisant l'item courant comme racine.
      body:
        application/json:
          schema: delete
          example: !include ../samples/delete.sample
      responses:
        204:

- collection-item-metadata:
    description: API de Gestion standard d'une collection de <<resourcePathName>> autorisant les écritures.
    type: base
    is: [ standardErrors ]
    get:
      description: Accès à un item dans la collection en utilisant l'item courant comme racine.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/query.sample
      responses:
        200:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    post?:
      description: Création d'un item dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/create.sample
      responses:
        201:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    patch?:
      description: Mise à jour d'un ensemble d'items dans la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/update.sample
      responses:
        200:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    delete?:
      description: Effacement d'un ensemble d'items depuis la collection <<resourcePathName>>.
      body:
        application/json:
          schema: collectionQuery
          example: !include ../samples/delete.sample
      responses:
        204:

- collection-item-storage:
    description: API de Gestion standard d'un item d'une collection de <<resourcePathName>> autorisant les écritures et/ou les effacements.
    type: base
    is: [ standardErrors ]
    get:
      is: [ allows ]
      description: Accès à un item dans la collection en utilisant l'item courant comme racine.
      body:
        application/json:
          schema: projection
          example: !include ../samples/projection.sample
      responses:
        200:
          body:
            application/json:
              schema: <<answearModel>>
              example: <<exampleAnswearModel>>
    delete?:
      description: Effacement d'un item dans la collection en utilisant l'item courant comme racine.
      responses:
        204:
